I have implemented the main logic by creating the two static methods with loops :
	- void SearchForConsecutive(int[] array)
	- int[] RemoveEmptyGlasses(int[] originalArray, int indexToRemoveFrom)

The actual result is kept in a global static variable called _roundCounter.

There is one static method for importing the numbers through the console and checking if 
the user`s input meet the constraint requirements.

-----void SearchForConsecutive(int[] array):

It loops through the whole array([-1]) checking if the current element is equal to the next one.
The variable "consCounter" starts from 1 because the current element is equal to itself.
If a match occurs  "consCounter" increases with one, then another check if "consCounter"
is gone up to 3. If "consCounter" is less than 3 and the next element is not equal to the
current one the "consCounter" is reseted back to 1.
If "consCounter" is equal to 3 that means that a full round is made and the "_roundCounter"
variable is increased. After that the other method is called for creating the new array 
with the 3 equal consequent elements removed. Then the search method is called again recursively
only if the new array contains 3 or more elements (otherwise there is no chance for a round).

----int[] RemoveEmptyGlasses(int[] originalArray, int indexToRemoveFrom) :
The second logical method takes as arguments the current array and the index of the first of the 
three equal consequent elements. Then it creates a new array with the length of the old array 
minus three. A loop with double index goes through both old and new element and when the loop index
is equal to the first index from "the round", the old array index is increased by three, to avoid 
the unwanted element to be copied in the new array. Also the new array has a shorter length so the
"increase-by-three" step protects us from going out of the range of the smaller(the new ) array.
Then the method returns the new array .


----int[] ManualInputWithValidation():
This method communicates with the user through the console. It uses an infinite loop, so if the user
inserts a number outside the constrains, or an unsupported format it will not accept it and it will 
loop back without breaking the application and a message will give an instruction to the user.
First it requires a size of the array, then it will ask for every single element to be filled in.
At the end it will return the users array. This method is only optional.


In the Main method I have left the manual method for the user. If you want to test the program with 
the arrays from the example, please comment (disable it) the ManualInputWithValidation method
 and uncomment the wanted array.